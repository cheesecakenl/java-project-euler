package nl.dev4all.problems;

import nl.dev4all.numbers.NumberUtil;
import nl.dev4all.primes.Sieve;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author boy
 */
public class Problem_12 {

    NumberUtil numberUtil = new NumberUtil();
    BigInteger TWO = new BigInteger("2");
    List<Integer> primes = new ArrayList();

    /*
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    
    Let us list the factors of the first seven triangle numbers:
    
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    
    We can see that 28 is the first triangle number to have over five divisors.    
    What is the value of the first triangle number to have over five hundred divisors?
     */
    public Problem_12() {
        Sieve sieve = new Sieve(65500);
        primes = sieve.getPrimeNumbersUpToN(65500);

        int max = 501;

        int divisors = 0;

        BigInteger number = BigInteger.ONE;
        BigInteger n = BigInteger.ONE;

        while (divisors < max) {
            int aantal = getDivisorsOfNPlusOne(n);

            if (divisors < aantal) {
                divisors = aantal;
            }

            if (divisors < max) {
                n = n.add(BigInteger.ONE);
            }
        }

        System.out.println(getTriangleNumber(n));
    }

    private int countDivisors(BigInteger n) {
        int count = 0;

        BigDecimal dec = new BigDecimal(n, 0);
        BigDecimal root = numberUtil.getSquareRoot(dec);
        BigInteger test = root.toBigInteger();

        for (BigInteger bigDec = BigInteger.ONE; bigDec.compareTo(n) < 1; bigDec = bigDec.add(BigInteger.ONE)) {
            if (n.mod(bigDec) == BigInteger.ZERO) {
                count++;
            }
        }

        return count;
    }

    private int getDivisorsOfNPlusOne(BigInteger n) {
        BigInteger plusOne = n.add(BigInteger.ONE);

        //return getNumberOfDividers(n);
        
        if (numbersAreCoPrime(n, plusOne)) {
            return countDivisors(n) * countDivisors(plusOne);
        }

        return -1;
    }

    private boolean numbersAreCoPrime(BigInteger a, BigInteger b) {
        BigInteger gcd = a.gcd(b);
        if (gcd.compareTo(BigInteger.ONE) == 0) {
            return true;
        }

        return false;
    }

    /* n(n+1)/2 */
    private BigInteger getTriangleNumber(BigInteger n) {
        return n.multiply(n.add(BigInteger.ONE)).divide(TWO);
    }

    private int getNumberOfDividers(BigInteger n) {
        List<Integer> count = new ArrayList();

        for (Integer i : primes) {
            if (n.mod(new BigInteger(Integer.toString(i))).compareTo(BigInteger.ZERO) == 0) {
                count.add(i);
            }
        }

        /* Todo get exponents of prime factors
         * 28 = 2to2 * 7to1
         */
        List<Integer> exponents = new ArrayList();

        for (Integer prime : count) {
        }

        return -1;
    }

    private List<Integer> primeFactors(int numbers) {
        int n = numbers;
        List<Integer> factors = new ArrayList<Integer>();
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n > 1) {
            factors.add(n);
        }
        return factors;
    }
}
